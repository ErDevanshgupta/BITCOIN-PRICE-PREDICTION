lear all
clc

%INPUT DATA
Cost=[2 7 4;3 3 1;5 5 4;1 6 2];
A=[5 8 7 14]; %ROWS basically SUPPLY
B=[7 9 18]; %COLUMNS basically demand

%CHECK BALANCED OR UNBALANCED
if sum(A)==sum(B)
    fprintf('Balanced transportation')
else
    fprintf('\nUnbalanced transportation')

    if sum(A)<sum(B)
        Cost(end+1,:)=zeros(1,size(A,2));
        A(end+1)=sum(B)-sum(A);

    elseif sum(B)<sum(A)
        Cost(:,end+1)=zeros(1,size(A,2));
        B(end+1)=sum(A)-sum(B);
    end
end


 ICost=Cost;
 X=zeros(size(Cost)); %for allocation matrix

 [m,n]=size(Cost); %size of the Cost Matrix
 BFS=m+n-1;

 %next phase is finding allocations
 for i=1:size(Cost,1)
     for j=1:size(Cost,2)
         hh=min(Cost(:)); %yeh min in entire matrix dega
         [rowind,colind]=find(hh==Cost); %yeh index posns dega min value ka
         x11=min(A(rowind),B(colind)); %allocation find kr rhe
         [val,ind]=max(x11); %max allocation kaha hua
         ii=rowind(ind);
         jj=colind(ind);

         y11=min(A(ii),B(jj)); %min(supply,demand) find kr rhe

         X(ii,jj)=y11; %assign allocation in the X matrix

         A(ii)=A(ii)-y11;
         B(jj)=B(jj)-y11;

         Cost(ii,jj)=Inf; %assign infinity so that next time it is not chosen

     end
 end

 %print initial BFS
 fprintf('\nInitial BFS=\n');
 IB=array2table(X);
 disp(IB);

 %check for degen and non-degen
 TotalBFS=length(nonzeros(X)); %kitni allocations hui hain

 if TotalBFS==BFS
     fprintf('\nInital BFS is Non Degenerate\n');
 else
     fprintf('\nInital BFS is Degenerate');
 end

 %%compute inital Transportation Cost
 InitialCost=sum(sum(ICost.*X)); %col wise sum dega isliye 2 times sum 
 fprintf('Initial BFS Cost = %d\n',InitialCost);

 %END OF CODE
